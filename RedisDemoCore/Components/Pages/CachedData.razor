@using RedisDemoCore.Models
@using RedisDemoCore.Services
@using RedisDemoCore.Extensions
@using RedisDemoCore.Components.Pages
@inject RedisDemoCore.Services.WeatherForecastService weatherService
@inject Microsoft.Extensions.Caching.Distributed.IDistributedCache cache

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button class="btn btn-primary" @onclick="LoadedForcast">Load Forecast</button>

@if (forecasts is null && loadLocation == "")
{
    <p><em>Click the button to load the forecast</em></p>
}
else if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @isCached">@loadLocation</div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureInC</td>
                    <td>@forecast.TemperatureInF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecastModel[] forecasts;
    private string loadLocation = "";
    private string isCached = "";


    //protected override async Task OnInitializedAsync()
    //{
    //    forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //}

    private async Task LoadedForcast()
    {
        forecasts = null;
        loadLocation = null;

        var recordKey = "WeatherForecast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");

        forecasts = await cache.GetRecordAsync<WeatherForecastModel[]>(recordKey);

        if (forecasts is null)
        {
            forecasts = await weatherService.GetWeatherForecastsAsync(DateTime.Now);

            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCached = "";

            await cache.SetRecordAsync(recordKey, forecasts);


        }
        else
        {
            loadLocation = $"Loaded from cache at {DateTime.Now}";
            isCached = "text-danger";

        }
    }
}
